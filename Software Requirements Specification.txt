 
Software Requirements Specification for Autonomous Robot Route Finding, Navigation, and Visualization
Version 2.0 approved
Prepared by David Rodriguez, Brendan Stassel, and Neil Reutov
25 February 2018

Revision History
Name: Neil Reutov, David Rodriguez, Brendan Stassel
Date: 02/25/2018
Reason For Changes: Added references to UI, Design, and System schematics. Corrected errors throughout the document. Heavily revised section 5 and 6.
Version: 2.0


Date: 02/04/2018
Reason For Changes: First draft of document.
Version: 1.0

TABLE OF CONTENTS
	1. CONTRACT
	2. INTRODUCTION
		2.1 Purpose
		2.2	Document Conventions
		2.3	Intended Audience and Reading Suggestions
		2.4	Product Scope
		2.5	References
	3. OVERALL DESCRIPTION
		3.1	Product Perspective
		3.2	User Classes and Characteristics
		3.3	Operating Environment
		3.4	User Documentation
		4.5	Assumptions and Dependencies
	4. EXTERNAL INTERFACE REQUIREMENTS
		4.1	User Interfaces
		4.2	Hardware Interfaces
		4.3	Software Interfaces
		4.4	Communications Interfaces
	5. SYSTEM FEATURES
		5.1	Enable/Disable Autonomous Program
			5.1.1 Description and Priority
			5.1.2 Stimulus/Response Sequences
			5.1.4 Functional Requirements
		5.2 Route Determination
			5.2.1 Description and Priority
			5.2.2 Stimulus/Response Sequences
			5.3.3 Functional Requirements
		5.3 Obstacle Detection
			5.3.1 Description and Priority
			5.3.2 Stimulus/Response Sequences
			5.3.3 Functional Requirements
		5.4 Obstacle Avoidance
			5.4.1 Description and Priority
			5.4.2 Stimulus/Response Sequences
			5.4.3 Functional Requirements
		5.5 Stall Detection
			5.5.1 Description and Priority
			5.5.2 Stimulus/Response Sequences
			5.5.3 Functional Requirements
		5.6 Stall Recovery
			5.6.1 Description and Priority
			5.6.2 Stimulus/Response Sequences
			5.6.3 Functional Requirements
	6. OTHER NONFUNCTIONAL REQUIREMENTS
		6.1 Safety Requirements
		6.2 Security Requirements
		6.3 Software Quality Attributes
		6.4 Business Rules


1. CONTRACT

The delivered autonomous robot route finding, navigation, and visualization software will interface with the software provided by the UAA Robotics Club in order to meet four main objectives:
	1) Autonomously navigate the robot around obstacles and determine a path to the GPS coordinates.
	2) Autonomously identify a yellow tennis ball through the ZED camera.
	3) Autonomously detect a stall and attempt recovery from the stall.
	4) Pass the ZED video feed to the UAA Robotics Club software.

Details of the four main objectives:
	1) The software will navigate the robot across the desert terrain after the input of accurate GPS coordinates of the tennis ball objective. The navigation software will avoid obstacles too large for the robot to drive over and cliffs too tall for the robot to drive down. The navigation software will not identify types of terrain, such as silt, sand, gravel, water, etc. The navigation software will put the safety of the other robot systems as its highest priority, followed second by the successful navigation to the tennis ball objective.

	2) The software will identify a standard yellow tennis ball only in sunny or cloudy conditions. The background of the tennis ball will only be a red desert with sparse green foliage. The software will identify a standard yellow tennis ball between 1 and 10 meters from the ZED camera. Once the tennis ball is identified it will notify the user.

	3) The software will detect when a stall occurs. A stall is identified as drive commands being sent to the UAA Robotics Software and the robot’s on board sensors not detecting any movement. When a stall is detected, the software will attempt to recover from the stall by backing up. If a stall is still detected, the autonomous navigation software will send a stall notification to the UAA Robotics Software and stop the autonomous navigation software.

	4) The software will provide an augmented video feed of the ZED camera to the UAA Robotics Software. The feed will include a visual marker to show what the software is currently identifying as the tennis ball.

The Autonomous Robot Route Finding, Navigation, and Visualization software is further described in detail in the rest of this Software Requirement Specification document.

Contractor: David Rodriguez		Contractor: Neil Reutov		Contractor: Brendan Stassel



Sponsor: Dr. Kenrick Mock		Sponsor: UAA Robotics Club



2. INTRODUCTION

	2.1 Purpose 
		These requirements pertain to the autonomous route finding, navigation, and visualization aspect of the robot challenge robot for University of Alaska Anchorage Robotics Club. This system will be integrated into a larger control system that is not in the scope of this document.

	2.2 Document Conventions
		There is no special formatting to take note of. Each major feature will have its own priority and the detailed description will explain the priorities within each major feature.

	2.3 Intended Audience and Reading Suggestions
		This document is designed for developers, users, and testers of the UAA Robotics Club robot. This Software Requirements Specification (SRS) contains a detailed description of the autonomous route finding, navigation, and visualization. It can be read front to back or in any order the reader desires. It is a top down approach, which first covers the overall description, it then describes the external interface, hardware, software, and communications. It describes the main system features and nonfunctional requirements. Supplementary documents for this are a system level schematic, a design schematic, and a UI schematic.

	2.4 Product Scope
		This software will allow a robot to autonomously navigate and locate a tennis ball within a desert environment. The purpose is to demonstrate the ability of the robot to successfully accomplish navigation and visual location without the need for a human to direct its actions. This will be a proof of concept for an unmanned mars robot. This software will be a base for future teams to build upon, we will be providing basic navigation and location functionality.

	2.5 References
		Requirements and Guidelines for the Robot, University robot Challenge Mars Society 2018
		http://urc.marssociety.org/home/requirements-guidelines


3. OVERALL DESCRIPTION

	3.1 Product Perspective
		This SRS is defining a system for autonomous route finding, navigation, and visualization to be used in a larger system to control a robot. There are comparable systems but this will be a self-contained, purpose built design specifically for UAA Robotics Club. This system will integrate with the larger control system (see System Schematic.pdf file) through a series of commands, which are yet to be determined (see UI.svg file). It will also interface with a GPS and Accelerometer to determine where it is and where it needs to go.

		Product Functions
		The four main functions will be:
			1) To identify obstacles and navigate around them to the GPS coordinates.
			2) To identify a yellow tennis ball using the ZED camera.
			3)Stall detection and recovery.
			4) Passing the video feed to the larger control system.

	3.2 User Classes and Characteristics
		search()
		tennis_ball_detection()
		obstacle_detection()
		obstacle_avoidance()
		find_route()
		move(direction)
		rotate(degrees)
		check_for_stall()
		stall_recovery()

	3.3 Operating Environment
		The robot will be designed for operation with an outside environment in mind, specifically for a desert in the daytime. Rain and snow will not be planned for though wind and clouds are something we will take into consideration while building our software. Our software will run on a Jetson TX2 running Ubuntu 14.04.5 and will integrate with a control system provided by our client. It will control a ZED stereoscopic camera and issue commands to control the robot. We also intend to use an accelerometer and GPS for guiding navigation and feedback. 

		Design and Implementation Constraints

		The design will be limited in the fact that the hardware and software for the robot and communication tools must cost less than $17,500. The system will be limited by the hardware chosen by the client which is a Jetson TX2. The Jetson TX2 has 8GB of memory and a GPU containing 256 CUDA cores. The Jetson TX2 is restricted to Ubuntu 14.04.5 The UAA Robotics Club will be required to maintain the software after delivery. We will provide detailed commentary to our code to facilitate their ability to maintain the software long-term and further develop the system in the future.

	3.4 User Documentation
		Our users are software developers and our code documentation will be their guide. We will give the lead software developer a tour of the software and our code base. However, we will also provide a list of commands for the system.

	3.5 Assumptions and Dependencies
		We are assuming that we can patch together a final project using various libraries, such as the OctoMap library, OpenCV libraries, Jetson TX2 SDK, and our own code. We are assuming our code will integrate easily with the software provided by the UAA Robotics Club. We will assume the hardware we have is capable of supporting our code. We are assuming that we will be able to test and debug our autonomous system with a drivable robot before April 2018.


4. EXTERNAL INTERFACE REQUIREMENTS
	
	4.1 User Interfaces
		We will not be creating a GUI of our own for the autonomous system, but will interface via a command terminal which will take input and display output. The autonomous driving system will send commands to the robot drive systems through an API provided to us by the UAA Robotics Club. (See UI.svg file.)

	4.2 Hardware Interfaces
		The autonomous system will be programmed on the TX2 and receive input from the ZED camera system, GPS, Sensors (through Arduino), and Comms base. It will provide output to the autonomous notifications LEDs and drive system motor controls (through Arduino). The ZED camera system will use USB 3.0, the Comms Base will use an XRange antenna over TCP, and the Arduinos will use RS-232 serial connections.

	4.3 Software Interfaces
		We will use the Jetson TX2 SDK to create the autonomous system. Ubuntu 14.04.5 x64 (Trusty Tahr) is the required OS for the Jetson TX2. The ZED SDK on Jetson TX2 v3.1 (CUDA 9.0) will also be installed on the Jetson TX2. The code will mostly be Python3 and OpenCV. OpenCV and NVIDIA VisionWorks libraries will provide functionality identifying the tennis ball and obstacles in the environment. Python3 code will integrate the autonomous system with the API for the robot base station.

	4.4 Communications Interfaces
		A video stream from the ZED camera will be provided to the comms base station. The video feed will provide visual identification of the obstacles and tennis ball to the users. Also, notifications and errors will be passed on to the comms base station for the users to see.


5. SYSTEM FEATURES

	The following is information about features that the client requested to be included in the overall design of the system.

	5.1 Enable/Disable Autonomous System
		5.1.1	Description and Priority
			A method for shutting down the program or starting it up, without it interfering with regular operations of the robot.
			Priority: Low
		5.1.2	Stimulus/Response Sequences
			Stimulus: User sends command to robot through base station to enable/disable autonomous navigation.
			Response: Robot enables/disables autonomous navigation.
		5.1.3	Functional Requirements
			REQ-1: Communication systems must be functioning for the command to be sent.
	
	5.2 Route Determination
		5.2.1	Description and Priority
			Receive GPS coordinates from base station and navigate the robot to that location. Obstacles along the path must be navigated around.
			Priority: High
		5.2.2	Stimulus/Response Sequences
			Stimulus: Receive GPS coordinates from base station.
			Response: Use current GPS location and received GPS coordinates to create a path for navigation. As the robot travels along the path, use sensor/camera input to navigate around obstacles
		5.2.3	Functional Requirements
			REQ-1: Communication system must be functioning.
			REQ-2: GPS system must be functioning.
			REQ-3: Camera/sensor systems must be functioning.
			REQ-4: Obstacle avoidance algorithm must be functioning.
	
	5.3 Obstacle Detection
		5.3.1	Description and Priority
			An algorithm for identifying obstacles that the robot can not drive over and updating the path to avoid them.
			Priority: High
		5.3.2	Stimulus/Response Sequences
			Stimulus: Visual input from the ZED camera system.
			Response: Drive around the obstacles
			This feature could either be a user action, in the way that a human could control the robot around said obstacles, or by an algorithm that self-determines if the area has an obstacle and how to go about avoiding it.
		5.3.3	Functional Requirements
			REQ-1: Option to let a human control it. 
			REQ-2: Let the algorithm for determining obstacles proceed without user input.
	
	5.4 Obstacle Avoidance
		5.4.1	Description and Priority
			An algorithm for avoiding obstacles. More for how the controls of the robot would accomplish this.
			Priority: High
		5.4.2	Stimulus/Response Sequences
			Stimulus: Input from Obstacle Detection algorithm.
			Response: Drive around the obstacles
			This feature could either be a user action, in the way that a human could see and control the robot around said obstacles, or by an algorithm that self-determines if the area has an obstacle and then goes around it.
		5.4.3	Functional Requirements
			REQ-1: Option to let a human control it. 
			REQ-2: Let the algorithm for determining obstacles proceed without user input.
	
	5.5 Stall Detection
		5.5.1	Description and Priority
			A stall is when the robot does not change position after a few seconds with the wheels spinning. This feature is a way of detecting that stall.
			Priority: Low
		5.5.2	Stimulus/Response Sequences
			Stimulus: Position of robot doesn’t change after a few seconds of commands being sent to the driver control system.
			Response: Proceed to stall recovery.
			This feature detects a stall and then attempts a recovery. 
		5.5.3	Functional Requirements
			REQ-1: Driver control system must be functional.
	
	5.6  Stall Recovery
		5.6.1	Description and Priority
			An algorithm that attempts a stall recovery, either by reversing or changing direction of the robot.
			Priority: Low
		5.6.2	Stimulus/Response Sequences
			Stimulus: Input from the Stall Detection feature i.e. the position of the robot doesn’t change after a few seconds.
			Response: Attempts a stall recovery, either by reversing or changing direction of the robot.
			This feature attempts a recovery from a stall by input from the Stall Detection algorithm.
		5.6.3	Functional Requirements
			REQ-1: Stall Detection system is functional
	
	5.7 Tennis Ball Detection
		5.7.1	Description and Priority
			The program have some sort of indication that the tennis ball has been located in current video feed.
			Priority: High
		5.7.2	Stimulus/Response Sequences
			There aren’t any needed user actions for this feature. There will be a system response for locating the target object. It might be some text that appears on the video feed, a sound from the robot itself, or even a light on the robot that lights up when it successfully finds the target object.
		5.7.3	Functional Requirements
			REQ-1: ZED camera system is functional.
	
	5.8 Tennis Ball Search Pattern
		5.8.1	Description and Priority
			An navigational algorithm that determines how to find the Tennis Ball when the robot gets to the target location.
			Priority: Med
		5.8.2	Stimulus/Response Sequences
			No needed user actions besides the original GPS coordinates. The system response should determine how far away from the target location the robot can go using the Search Pattern Algorithm.
		5.8.3	Functional Requirements
			REQ-1: The inputted GPS coordinates to create a “boundary” around the target location are accurate.
			REQ-2: GPS data from the robot is accurate.
			Some errors that could occur would be if the tennis ball is outside the boundary of the search pattern, the GPS coordinates are incorrect, or the GPS device fails midway.
	
	5.9 Video Feed
		5.9.1	Description and Priority
			Output video feed from the ZED camera provided. The feed will also include visual identification of the obstacles and the  tennis ball.
			Priority: High
		5.9.2	Stimulus/Response Sequences
			There is no need for user actions regarding this feature. The algorithms required, such as the Obstacle Navigation Algorithm, Search Pattern Algorithm, and the Tennis Ball Determining Algorithms, will make use of the video feed the ZED camera will provide. Also, the video feed will be outputted for users to view during the runtime of the robot.
		5.9.3	Functional Requirements
			REQ-1: Tennis Ball Detection system is functional.
			REQ-2: Obstacle Detection system is functional.


6. OTHER NONFUNCTIONAL REQUIREMENTS

	6.1 Safety Requirements
		Safety for this autonomous system ONLY pertains to the safety of the robot. The autonomous system must not damage other robot systems. Examples are:
			-Do not damage the drive control motors during a stall.
			-Do not drive off ledges that while cause the robot to tip over.
			-Do not crash into obstacles that damage the robot systems.

	6.2 Security Requirements
		There are no security requirements defined for this product.

	6.3 Software Quality Attributes
		This product will be a “first draft” product. The focus on the autonomous system is to create basic functionality. This will not be a robust system that receives 100% in the competition. Coding will emphasize the ability to be tested and maintained by the UAA Robotics club. The product will allow the UAA Robotics club to test their robot in conditions and gather data on what better modifications need to be made for the second version of the autonomous software. The coding will also be verbose in comments to ensure future work on the autonomous system will have the lowest learning curve possible.

	6.4 Business Rules
		No specific business rules are required for this product.